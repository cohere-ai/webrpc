{{define "client"}}
{{if .Services}}
//
// Client
//

{{range .Services}}
const {{.Name | constPathPrefix}} = "/rpc/{{.Name}}/"
{{end}}

{{range .Services}}
  type {{.Name}}Client interface {
    {{.Name}}
    {{- range .Methods}}
      {{- if .StreamOutput }}
        {{.Name}}({{.Inputs | methodInputs}}) ({{.Name}}StreamReader, error)
      {{- end}}
    {{end}}
  }
{{end}}
{{range .Services}}
  {{ $serviceName := .Name | clientServiceName}}
  type {{$serviceName}} struct {
    client HTTPClient
    urls   [{{.Methods | countMethods}}]string
  }

  func {{.Name | newClientServiceName }}(addr string, client HTTPClient) {{.Name}}Client {
    prefix := urlBase(addr) + {{.Name | constPathPrefix}}
    urls := [{{.Methods | countMethods}}]string{
      {{- range .Methods}}
      prefix + "{{.Name}}",
      {{- end}}
    }
    return &{{$serviceName}}{
      client: client,
      urls:   urls,
    }
  }

  {{range $i, $method := .Methods}}
    {{- if .StreamOutput}}
    func (c *{{$serviceName}}) {{.Name}}({{.Inputs | methodInputs}}) ({{.Name}}StreamReader, error) {
    {{- else}}
    func (c *{{$serviceName}}) {{.Name}}({{.Inputs | methodInputs}}) ({{.Outputs | methodOutputs }}) {
    {{- end}}
      {{- $inputVar := "nil" -}}
      {{- $outputVar := "nil" -}}
      {{- if .Inputs | len}}
      {{- $inputVar = "in"}}
      in := struct {
        {{- range $i, $input := .Inputs}}
          Arg{{$i}} {{$input | methodArgType}} `json:"{{$input.Name | downcaseName}}"`
        {{- end}}
      }{ {{.Inputs | methodArgNames}} }
      {{- end}}
      {{- if .StreamOutput}}
        resp, err := clientRequest(ctx, c.client, c.urls[{{$i}}], {{$inputVar}}, {{$outputVar}})
        if err != nil {
          return nil, err
        }

        return newClient{{.Name}}StreamReader(resp), nil
      {{- else}}
        {{- if .Outputs | len}}
        {{- $outputVar = "&out"}}
        out := struct {
          {{- range $i, $output := .Outputs}}
            Ret{{$i}} {{$output | methodArgType}} `json:"{{$output.Name | downcaseName}}"`
          {{- end}}
        }{}
        {{- end}}
        _, err := clientRequest(ctx, c.client, c.urls[{{$i}}], {{$inputVar}}, {{$outputVar}})
        return {{argsList .Outputs "out.Ret"}}{{commaIfLen .Outputs}} err
      {{- end}}
    }
  {{end}}
{{end}}

//
// Client helpers
//

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
type HTTPClient interface {
  Do(req *http.Request) (*http.Response, error)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
  // If the addr specifies a scheme, use it. If not, default to
  // http. If url.Parse fails on it, return it unchanged.
  url, err := url.Parse(addr)
  if err != nil {
    return addr
  }
  if url.Scheme == "" {
    url.Scheme = "http"
  }
  return url.String()
}

func clientRequest(ctx context.Context, client HTTPClient, url string, in, out interface{}) (*http.Response, error) {
  reqBody, err := json.Marshal(in)
  if err != nil {
    return nil, Errorf(ErrInvalidArgument, err, "failed to marshal json request")
  }
  if err = ctx.Err(); err != nil {
    return nil, Errorf(ErrAborted, err, "aborted because context was done")
  }

  req, err := http.NewRequest("POST", url, bytes.NewBuffer(reqBody))
  if err != nil {
    return nil, err
  }
  req.Header.Set("Content-Type", "application/json")
  if headers, ok := GetClientRequestHeaders(ctx); ok {
    for k := range headers {
      for _, v := range headers[k] {
        req.Header.Add(k, v)
      }
    }
  }

  resp, err := client.Do(req)
  if err != nil {
    return resp, Errorf(ErrFail, err, "request failed")
  }

  // auto-close body for non-streaming outputs
  if out != nil {
    defer func() {
      cerr := resp.Body.Close()
      if err == nil && cerr != nil {
        err = Errorf(ErrFail, cerr, "failed to close response body")
      }
    }()
  }

  if err = ctx.Err(); err != nil {
    return resp, Errorf(ErrAborted, err, "aborted because context was done")
  }

  if resp.StatusCode != 200 {
    return resp, errorFromResponse(resp)
  }

  if out != nil {
    respBody, err := ioutil.ReadAll(resp.Body)
    if err != nil {
      return resp, Errorf(ErrInternal, err, "failed to read response body")
    }

    err = json.Unmarshal(respBody, &out)
    if err != nil {
      return resp, Errorf(ErrInternal, err, "failed to unmarshal json response body")
    }
    if err = ctx.Err(); err != nil {
      return resp, Errorf(ErrAborted, err, "aborted because context was done")
    }
  }

  return resp, nil
}

// errorFromResponse builds a webrpc Error from a non-200 HTTP response.
func errorFromResponse(resp *http.Response) Error {
  respBody, err := ioutil.ReadAll(resp.Body)
  if err != nil {
    return Errorf(ErrInternal, err, "failed to read server error response body")
  }
  var respErr Error
  if err := json.Unmarshal(respBody, &respErr); err != nil {
    return Errorf(ErrInternal, err, "failed unmarshal error response")
  }
  return respErr
}

func WithClientRequestHeaders(ctx context.Context, h http.Header) (context.Context, error) {
  if _, ok := h["Accept"]; ok {
    return nil, errors.New("provided header cannot set Accept")
  }
  if _, ok := h["Content-Type"]; ok {
    return nil, errors.New("provided header cannot set Content-Type")
  }

  copied := make(http.Header, len(h))
  for k, vv := range h {
    if vv == nil {
      copied[k] = nil
      continue
    }
    copied[k] = make([]string, len(vv))
    copy(copied[k], vv)
  }

  return context.WithValue(ctx, HTTPClientRequestHeadersCtxKey, copied), nil
}

func GetClientRequestHeaders(ctx context.Context) (http.Header, bool) {
  h, ok := ctx.Value(HTTPClientRequestHeadersCtxKey).(http.Header)
  return h, ok
}

{{- if .Services | hasStreamOutput}}
  //
  // Client streaming helpers
  //

  type clientDownloadStreamReader struct {
    resp    *http.Response
    reader  io.Reader
    decoder *json.Decoder
  }

  func newClientDownloadStreamReader(resp *http.Response) *clientDownloadStreamReader {
    reader := httputil.NewChunkedReader(resp.Body)
    decoder := json.NewDecoder(reader)
    return &clientDownloadStreamReader{
      resp: resp, reader: reader, decoder: decoder,
    }
  }

  func (c *clientDownloadStreamReader) Read() (base64 string, err error) {
    for {
      out := struct {
        Data struct {
          Ret0 string `json:"base64"`
        } `json:"data"`
        Error Error `json:"error"`
        Ping  bool  `json:"ping"`
      }{}

      err = c.decoder.Decode(&out)

      // Skip ping payloads
      if err == nil && out.Ping {
        continue
      }

      // Error checking
      if err != nil {
        if err == io.EOF {
          return out.Data.Ret0, Errorf(ErrStreamClosed, err, err.Error())
        }
        return out.Data.Ret0, Errorf(ErrStreamLost, err, err.Error())
      }
      if out.Error.Code != nil || out.Error.Message != "" {
        return out.Data.Ret0, out.Error
      }

      return out.Data.Ret0, nil
    }
  }
{{- end}}
{{end}}
{{end}}
